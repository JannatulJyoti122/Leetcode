/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool find(TreeNode *root,vector<pair<int,int>>ans){
        if(root==NULL) return true;
        bool p=true;
        for(int i=0;i<ans.size();i++){
            if(ans[i].second==1&&ans[i].first>=root->val) {
                p=false;
                break;
            }
            if(ans[i].second==0&&ans[i].first<=root->val){
                p=false;
                break;
            }
        }
        if(p==false) return p;
        ans.push_back({root->val,0});
        bool q=find(root->left,ans);
        ans.pop_back();
        ans.push_back({root->val,1});
        bool pp=find(root->right,ans);
        return pp&q;
    }
    bool isValidBST(TreeNode* root) {
        vector<pair<int,int>>ans;
        ans.push_back({root->val,0});
        bool p= find(root->left,ans);
        ans.pop_back();
        ans.push_back({root->val,1});
        bool q=find(root->right,ans);
        return p&q;
    }
};
