class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>>ans;
        if(intervals.size()==0){
            ans.push_back(newInterval);
            return ans;
        }
        int check=0,j=1;
        int start=intervals[0][0];
        int end=intervals[0][1];
        if(newInterval[1]<start){
            j=0;
            start=newInterval[0];
            end=newInterval[1];
        }
        while(j<=intervals.size()){
            if(j==intervals.size()){
                if(check==0){
                    if(newInterval[0]<=end){
                        start=min(start,newInterval[0]);
                        end=max(end,newInterval[1]);
                    }
                    else{
                        vector<int>temp;
                        temp.push_back(start);
                        temp.push_back(end);
                        ans.push_back(temp);
                        start=newInterval[0];
                        end=newInterval[1];
                    }
                }
                vector<int>temp;
                temp.push_back(start);
                temp.push_back(end);
                ans.push_back(temp);
                break;
            }
            if(intervals[j][0]>newInterval[0]&&check==0){
                check=1;
                if(newInterval[0]<=end){
                    start=min(start,newInterval[0]);
                    end=max(end,newInterval[1]);
                }else{
                    vector<int>temp;
                    temp.push_back(start);
                    temp.push_back(end);
                    ans.push_back(temp);
                    start=newInterval[0];
                    end=newInterval[1];
                }
                continue;
            }
            if(intervals[j][0]>end){
                vector<int>temp;
                temp.push_back(start);
                temp.push_back(end);
                ans.push_back(temp);
                start=intervals[j][0];
                end=intervals[j][1];
            }else{
                start=min(start,intervals[j][0]);
                end=max(end,intervals[j][1]);
            }
            j++;
        }
        return ans;
    }
};
