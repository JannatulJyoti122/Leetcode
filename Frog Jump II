class Solution {
public:
    bool find(vector<int>&stones,int mid){
        int n=stones.size();
        vector<int>v(n,0);
        int tot=stones[0]+mid;
        for(int i=1;i<n-1;i++){
            if(tot<stones[i]) return false;
            if(tot>stones[i]&&tot>=stones[i+1]) continue;
            v[i]=1;
            tot=stones[i]+mid;
        }
        int mx=0;
        int prev=stones[n-1];
        for(int i=n-2;i>=0;i--){
            if(v[i]==0){
                mx=max(mx,prev-stones[i]);
                prev=stones[i];
            }
        }
        cout<<mx<<endl;
        if(mx==0) return false;
        return mid>=mx;
    }
    int maxJump(vector<int>& stones) {
        int n=stones.size();
        int tot=stones[n-1]-stones[0];
        int left=0,right=tot;
        while(right-left>1){
            int mid=(left+right)/2;
            if(find(stones,mid)) right=mid;
            else left=mid+1;
        }
        if(find(stones,left)) return left;
        return right;
    }
};
